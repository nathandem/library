This app is an API. The view part of the MVC is up to a javascript-based or a mobile app.


Consideration on the use of serializer to handle the body of the post request of RentBook
-----------------------------------------------------------------------------------------

Performing the update with a serializer wouldn't be that simple, but feasable.
Here's how it would work:
The current SubscriberSerializer doesn't fit, because it expects most of a subscriber fields information,
so we would have to create a new one.

This new serializer, let's call it RentBookSerializer, would take:
I: book_id (read_only field) & some extra context to know the subscriber
    with this information it'd assign the book to the subscriber,
    and change the status of the book plus its due_back date
O: book.book.title & book.due_back (write_only fields)

Because I aim to perform multiple update, I'd have to link a ListSerializer to my Serializer (better to do
a staight serializer with so few fields). It'd be the related ListSerializer that take care of the batch update.

In the end,
Pro: validation (though I can easily perfom the "technical part" of the validation concerning the ids here with
get_object_or_404, then I can perform my business logic validation for the book status)
Con: I don't feel it's much easier to do this. Plus, in term of making the code more generic/DRF for
latter re-use by another section of the code, I don't feel there's a big gain compared to create a straight
python function which would take the book ids and the subscriber (but no request, to make it really
decorelated from the view, a real controller).

In short, I rather keep my view as it is now. If a need reveals itself latter to use this rent feature
somewhere else, I'll make it a generic controller.

=> in general, when should we use a Form/Serializer to handle post vs doing it by hand?
I guess, whenever it's creating or updating a wide number of fields, go for Form/Serializer.
On the other hand, when only a few fields are involved, especially if it's on different entities, stay with
view (or controller).


Consideration on the appropriate extend of the Librarian model
--------------------------------------------------------------

This model could include a more complete description of the librarian,
with information with his/her address, bank accounts, etc..
And, even though there might be more than 2 types of librarians in the roles of the library,
only 2 are considered in the system, based on whether or not they can create other librarian accounts.
Being more detailed in the role of the librarian is not the purpose of this library application,
it's the responsibility of the HR application.


Short consideration on historical records
-----------------------------------------

This Rental table is considered sufficient to old historic records for the system.
- a BookStatusHistory table tracking variations of statuses over time would have told how long books are in
  Maintenance status (not so useful) and in Booked status (would have been a nice other source of information
  hadn't we have the Booking table)
- a BookStatusHistory referencing the Librarians behind the change of status of a book would have been a tool to
  follow the activity of the librarians. But it's not the propose of this system to perform HR-related objectives
w


On Subscribers and Users
------------------------

Rent will continue to be done though the User model (though some verification needs to be done to ensure only subscribers rent) because it's where the username, first and last names are (in short the core identity of the person)


On field names
--------------

I give fields/columns semi-verbose names, so that no Django `verbose_name` is needed.
The name should indicate both the meaning of the column, but also its type.

In the Book model: `joined_library_on` suggests it's a Date, `joined_library_at` would have been a Datetime
Example in the Subscriber model: `has_issue`, `has_received_warning` can't be but booleans


Testing good practices
----------------------

When issue found, add a test that would have caught the problem.


On DRF not using standard python data types
-------------------------------------------

Model objects don't include a method to serialize themselves (move from a model object into a
python dict). So don't querysets. They don't include a method to transform the model objects
they contain into a list of dictionaries, with the dictionaries being representations of the data
in the model objects.
Instead, querysets include a set of methods matching get, put, update sql commands.
https://docs.djangoproject.com/en/2.1/ref/models/querysets/
and model objects, the methods and properties defined in the models plus some basic methods related
to dealing with this line in the SQL table.

Yet we need to move from querysets or model objects to the content-type of the response.

- Django's TemplateResponse does that. We provide the template a context made of python objects
and, in the template, we pick elements of the context to be included in the very template.

- Django provides a JsonResponse which returns a json response. Yet, this one takes a dict as its
entry. How do we get this dict? Either by making it by hands, or by using a DRF serializer.

JSONResponse(data, encoder=DjangoJSONEncoder, safe=True, json_dumps_params=None, **kwargs)
(In the doc, JsonResponse is said to be able to take different input data than a base dict, yet
in practice it crashes when receiving a Queryset or even a simple Model object.)

- DRF's Response method takes a native python object (a dictionary) and turns in into a JSON text.

=> In short, to returns JSON objects. 2 steps: 1) create the python dict, 2) dump the python dict
into a JSON string and send it to the network.
To create the python dict, 2 solutions: use a DRF's serializer or make the dict by hand.
To dump the json and send it, 2 solutions: use Django's JsonResponse or DRF's Response.

Note on DRF's types: DRF doesn't pop its custom data types from nowhere, they derive from and
extend native python types.
For example, `ReturnDict`, the datatype used in `serializer.data` extends the `dict` object,
as such it has all its methods and attributes not overwritten, most of the default ones are there.
